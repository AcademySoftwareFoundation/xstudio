#! /usr/bin/env python

import re
import sys
import os
from pathlib import Path
import argparse


class ColorPrint:

    @staticmethod
    def print_fail(message, end='\n'):
        sys.stderr.write('\x1b[1;31m' + message + '\x1b[0m' + end)

    @staticmethod
    def print_pass(message, end='\n'):
        sys.stdout.write('\x1b[1;32m' + message + '\x1b[0m' + end)

    @staticmethod
    def print_warn(message, end='\n'):
        sys.stderr.write('\x1b[1;33m' + message + '\x1b[0m' + end)

    @staticmethod
    def print_info(message, end='\n'):
        sys.stdout.write('\x1b[1;34m' + message + '\x1b[0m' + end)

    @staticmethod
    def print_bold(message, end='\n'):
        sys.stdout.write('\x1b[1;37m' + message + '\x1b[0m' + end)


def parse_args():
    parser = argparse.ArgumentParser(
        description='''Naive linter that inspects a cpp file looking for
        C++ actor framework message handler declarations. If it finds such
        a declaration it will order the lambdas alphabetically based on
        the parameters and overwrite the original file. Therefore use carefully
        and commit your changes before running this tool! It will also report
        the number pf lambdas that exceed 8 lines''',
        epilog="""All is well that ends well.""")
    parser.add_argument(
        '--all',
        action='store_true',
        help='Runs the script on all .cpp files in the repo')
    parser.add_argument(
        '--cpp-files',
        nargs='*',
        default=[],
        help='Specify a list of cpp files to inspect')
    return parser.parse_args()


def parse_behaviour_assign(original_code, position, reordered_code):

    inside = False
    r_bracket_count = 0
    bracket_count = 0
    lambda_contents = ""
    lambda_returns_something = False
    lambda_comment = ""
    all_lambdas = []
    capt = ""
    tail = ""
    num_overlength_lambdas = 0

    while 1:
        # skip comment block
        if original_code[position:position+2] == "/*":
            if inside:
                lambda_contents += \
                    original_code[
                        position:original_code.find("*/", position)+2
                        ]
                position = original_code.find("*/", position)+2
            elif all_lambdas:
                lambda_comment += \
                    original_code[
                        position:original_code.find("*/", position)+2
                        ]
                position = original_code.find("*/", position)+2
            else:
                p1 = position
                position = original_code.find("*/", position)
                reordered_code += original_code[p1:position]
        elif original_code[position:position+2] == "//":
            if inside:
                lambda_contents += \
                    original_code[position:original_code.find("\n", position)]
            elif all_lambdas:
                lambda_comment += \
                    original_code[position:original_code.find("\n", position)]
            position = original_code.find("\n", position)
        elif not inside:
            if original_code[position] == '(':
                r_bracket_count += 1
            if original_code[position] == ')':
                r_bracket_count -= 1
                if r_bracket_count == 0:
                    break
            m = re.match(
                "\n([^\S\r\n]*)(\\[[^\\]]*\\]\\(\s*)",
                original_code[position:]
                )

            if m:
                rr = re.match(
                    "\n([^\S\r\n]*)(\\[[^\\]]*\\]\\(\s*)[^\\)]+\\)[^\\{]+\\{",
                    original_code[position:]
                    )
                if rr and "->" in rr.group(0):
                    lambda_returns_something = True
                else:
                    lambda_returns_something = False


                position += len(m.group(0))
                inside = True
                lambda_contents = ""
                capt = m.group(1)+m.group(2)
            else:
                m = re.match(
                    "set_message_handler\\(.+return\s*\\{",
                    original_code[position:]
                    )
                if m:
                    reordered_code += m.group(0)
                    position += len(m.group(0))
                    r_bracket_count += 1
                else:
                    if not all_lambdas:
                        reordered_code += original_code[position]
                    else:
                        tail += original_code[position]
                    position += 1
        else:
            lambda_contents = lambda_contents + original_code[position]
            if original_code[position] == '{':
                bracket_count += 1
            elif original_code[position] == '}':
                bracket_count -= 1
                if bracket_count == 0:
                    all_lambdas.append((lambda_contents, capt, lambda_comment, lambda_returns_something))
                    inside = False
                    lambda_comment = ""
                    tail = ""
            position += 1

    all_lambdas.sort()
    first = True
    for (lambda_contents, capt, lambda_comment, lambda_returns_something) in all_lambdas:


        if not lambda_returns_something and lambda_contents.find("response_promise") != -1:
            print ("\n\nResponse promise used in lambda not returning a value:\n {0}\n\n".format(lambda_contents));

        if lambda_contents.count("\n") > 8:
            num_overlength_lambdas += 1
        if not first:
            reordered_code += ",\n\n"
        else:
            reordered_code += "\n"
            first = False
        if lambda_comment:
            m = re.match("\s+", capt)
            if m:
                lambda_comment = m.group(0) + lambda_comment
            reordered_code += lambda_comment + "\n"
        reordered_code += capt
        reordered_code += lambda_contents

    reordered_code += tail

    return (reordered_code, position, num_overlength_lambdas)


def auto_order_message_handlers(in_file_path, out_file_path):

    reordered_code = ""
    found_something = False
    num_overlength_lambdas = 0

    with open(in_file_path) as f:

        data = f.read()
        original_code = "".join(data)

        position = 0

        while 1:

            new_position = original_code.find("behavior_.assign", position)
            if new_position != -1:
                found_something = True
                reordered_code += original_code[position:new_position]
                (reordered_code, position, overlength) =\
                    parse_behaviour_assign(
                        original_code,
                        new_position,
                        reordered_code
                        )
                num_overlength_lambdas += overlength

            else:
                new_position = original_code.find(
                    "set_message_handler",
                    position
                    )
                if new_position != -1:
                    found_something = True
                    reordered_code += original_code[position:new_position]
                    (reordered_code, position, overlength) =\
                        parse_behaviour_assign(
                            original_code,
                            new_position,
                            reordered_code
                            )
                    num_overlength_lambdas += overlength

                else:
                    reordered_code += original_code[position:]
                    break

    if found_something:
        ColorPrint.print_info(
            "\nA message handler was found in file {0}:".format(in_file_path)
            )
        if num_overlength_lambdas:
            ColorPrint.print_fail(
                "    {0} lambdas greater than 8 lines in length found.".format(
                    num_overlength_lambdas
                    )
                )
        else:
            ColorPrint.print_pass(
                "    No lambdas greater than 8 lines in length found.")

        if reordered_code != original_code:
            with open(out_file_path, "w") as fout:
                fout.write(reordered_code)
            ColorPrint.print_warn(
                "    the linter has modified the code for this file.")
        else:
            ColorPrint.print_pass(
                "    no changes to this file were made by the linter.")


    else:
        ColorPrint.print_info(
            "\nMessage handler not found in "
            "file {0}, skipping".format(in_file_path)
            )


if __name__=="__main__":

    args = parse_args()

    files_to_tidy = []
    if args.all:
        # No args specified, so glob for cpp file assuming this script
        # lives in scripts/linting folder under xStudio repo root
        cpp_files = Path(
            os.path.realpath(__file__)
            ).parent.parent.parent.glob("src/*/src/*.cpp")
        files_to_tidy = [str(cpp_file) for cpp_file in cpp_files]
        cpp_files = Path(
            os.path.realpath(__file__)
            ).parent.parent.parent.glob("src/ui/qml/*/src/*.cpp")
        files_to_tidy += [str(cpp_file) for cpp_file in cpp_files]
    elif args.cpp_files:
        files_to_tidy = args.cpp_files
    else:
        print ("No cpp files specified for inspection. Use -h for help.")

    for file_to_tidy in files_to_tidy:
        auto_order_message_handlers(file_to_tidy, file_to_tidy)
