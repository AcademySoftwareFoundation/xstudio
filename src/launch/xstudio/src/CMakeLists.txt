project(xstudio VERSION ${XSTUDIO_GLOBAL_VERSION} LANGUAGES CXX)


find_package(OpenGL REQUIRED)
find_package(GLEW REQUIRED)
find_package(Qt5 COMPONENTS Core Quick Gui Widgets OpenGL QuickCompiler REQUIRED)
find_package(OpenSSL)
find_package(ZLIB)
find_package(fmt REQUIRED)

qtquick_compiler_add_resources(QML_RESOURCES ../../../../ui/qml/xstudio/qml.qrc)
set(SOURCES
	xstudio.cpp
	${QML_RESOURCES}
	)	

if(WIN32)
    # Add the /bigobj option for xstudio.cpp
    set_source_files_properties(xstudio.cpp PROPERTIES COMPILE_FLAGS "/bigobj")
endif()

if(NOT ${OTIO_SUBMODULE})
	find_package(OpenTime REQUIRED)
	find_package(OpenTimelineIO REQUIRED)
endif()

set(CMAKE_AUTOUIC ON)
set(CMAKE_AUTOMOC ON)

add_executable(${PROJECT_NAME} ${SOURCES})

configure_file(.clang-tidy .clang-tidy)

if(WIN32)
	configure_file(xstudio.bat.in xstudio.bat)
else()
	configure_file(xstudio.sh.in xstudio.sh @ONLY)
endif()

default_options(${PROJECT_NAME})

target_link_libraries(${PROJECT_NAME}
	PRIVATE
		xstudio::caf_utility
		xstudio::global
		xstudio::ui::model_data
		xstudio::ui::opengl::viewport
		xstudio::ui::qml::bookmark
		xstudio::ui::qml::conform
		xstudio::ui::qml::embedded_python
		xstudio::ui::qml::global_store
		xstudio::ui::qml::helper
		xstudio::ui::qml::log
		xstudio::ui::qml::session
		xstudio::ui::qml::studio
		xstudio::ui::qml::viewport
		xstudio::ui::qt::viewport_widget
		xstudio::ui::viewport
		xstudio::media
		xstudio::media_reader
		xstudio::utility
		fmt::fmt
	PUBLIC
		fmt::fmt
		spdlog::spdlog
		caf::core
		caf::io
		$<$<BOOL:${NVIDIA_HACK}>:GLdispatch>
		# quickfuture
		Qt5::Core
		Qt5::Gui
		Qt5::Quick
		Qt5::Widgets
		OpenSSL::SSL
		ZLIB::ZLIB
)

if(WIN32)
    target_link_libraries(${PROJECT_NAME} PRIVATE dbghelp)
else()
	target_link_libraries(${PROJECT_NAME} PUBLIC OTIO::opentime OTIO::opentimelineio)
endif()

if(WIN32)
	set_target_properties(${PROJECT_NAME}
		PROPERTIES
		RUNTIME_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/bin"
		OUTPUT_NAME "${PROJECT_NAME}"
		VS_DEBUGGER_ENVIRONMENT XSTUDIO_ROOT=${CMAKE_BINARY_DIR}/bin/$<$<CONFIG:Debug>:Debug>$<$<CONFIG:Release>:Release>
		LINK_DEPENDS_NO_SHARED true
	)
else()
	set_target_properties(${PROJECT_NAME}
		PROPERTIES
		RUNTIME_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/bin"
		OUTPUT_NAME "${PROJECT_NAME}.bin"
		LINK_DEPENDS_NO_SHARED true
	)
endif()

install(TARGETS ${PROJECT_NAME}
        RUNTIME DESTINATION bin)

if(WIN32)
	install(PROGRAMS
	  ${CMAKE_CURRENT_BINARY_DIR}/xstudio.bat
	  DESTINATION bin
	  RENAME xstudio)
else()
	install(PROGRAMS
	  ${CMAKE_CURRENT_BINARY_DIR}/xstudio.sh
	  DESTINATION bin
	  RENAME xstudio)

	install(PROGRAMS
	  ${CMAKE_CURRENT_SOURCE_DIR}/xstudio_desktop_integration.sh
	  DESTINATION bin
	  RENAME xstudio_desktop_integration)
endif()
