project(__pyside2_xstudio VERSION ${XSTUDIO_GLOBAL_VERSION} LANGUAGES CXX)

# Enable policy to run automoc on generated files.
if(POLICY CMP0071)
  cmake_policy(SET CMP0071 NEW)
endif()

if (CLANG_PATH)
	set(ENV{CLANG_INSTALL_DIR} $CLANG_PATH)
endif()

find_package(Shiboken2 REQUIRED)
find_package(PythonLibs REQUIRED)
find_package(PySide2 REQUIRED)
find_package(Python COMPONENTS Interpreter)

get_target_property(PYSIDE2_INCLUDE_DIR PySide2::pyside2 INTERFACE_INCLUDE_DIRECTORIES)
get_target_property(SHIBOKEN2_INCLUDE_DIRS Shiboken2::libshiboken INTERFACE_INCLUDE_DIRECTORIES)
list(GET SHIBOKEN2_INCLUDE_DIRS 0 SHIBOKEN2_INCLUDE_ROOT_DIR)

get_target_property(PYSIDE2_LIBS PySide2::pyside2 INTERFACE_LINK_LIBRARIES)

find_package(OpenGL REQUIRED)
find_package(GLEW REQUIRED)
find_package(Qt5 COMPONENTS Core Gui Widgets OpenGL Quick Qml QuickWidgets Network REQUIRED)
find_package(OpenSSL)
find_package(ZLIB)

set(CMAKE_AUTOUIC ON)
set(CMAKE_AUTOMOC ON)
set(CMAKE_AUTORCC ON)

# Set up the options to pass to shiboken.
set(WRAPPED_HEADER ${CMAKE_CURRENT_SOURCE_DIR}/wrappedclasses.h)
set(TYPESYSTEM_FILE ${CMAKE_CURRENT_SOURCE_DIR}/typesystem.xml)

# Get all relevant Qt include dirs, to pass them on to shiboken.
get_property(QT_CORE_INCLUDE_DIRS TARGET Qt5::Core PROPERTY INTERFACE_INCLUDE_DIRECTORIES)
get_property(QT_GUI_INCLUDE_DIRS TARGET Qt5::Gui PROPERTY INTERFACE_INCLUDE_DIRECTORIES)
get_property(QT_WIDGETS_INCLUDE_DIRS TARGET Qt5::Widgets PROPERTY INTERFACE_INCLUDE_DIRECTORIES)
get_property(QT_QUICKWIDGETS_INCLUDE_DIRS TARGET Qt5::QuickWidgets PROPERTY INTERFACE_INCLUDE_DIRECTORIES)
get_property(QT_QUICK_INCLUDE_DIRS TARGET Qt5::Quick PROPERTY INTERFACE_INCLUDE_DIRECTORIES)
get_property(QT_NETWORK_INCLUDE_DIRS TARGET Qt5::Network PROPERTY INTERFACE_INCLUDE_DIRECTORIES)
get_property(QT_QML_INCLUDE_DIRS TARGET Qt5::Qml PROPERTY INTERFACE_INCLUDE_DIRECTORIES)
set(QT_INCLUDE_DIRS ${QT_CORE_INCLUDE_DIRS} ${QT_GUI_INCLUDE_DIRS} ${QT_WIDGETS_INCLUDE_DIRS}
	${QT_QUICKWIDGETS_INCLUDE_DIRS} ${QT_QUICK_INCLUDE_DIRS} ${QT_NETWORK_INCLUDE_DIRS} ${QT_QML_INCLUDE_DIRS})
set(INCLUDES "")
foreach(INCLUDE_DIR ${QT_INCLUDE_DIRS})
    list(APPEND INCLUDES "-I${INCLUDE_DIR}")
endforeach()

list(APPEND INCLUDES "-I/opt/rh/devtoolset-9/root/usr/lib/gcc/x86_64-redhat-linux/9/include")

set(SHIBOKEN_OPTIONS --generator-set=shiboken --enable-parent-ctor-heuristic
    --enable-pyside-extensions --enable-return-value-heuristic --use-isnull-as-nb_nonzero
    --avoid-protected-hack
    ${INCLUDES}
    -I${CMAKE_CURRENT_SOURCE_DIR}
    -T${CMAKE_CURRENT_SOURCE_DIR}
    -T${PYSIDE2_INCLUDE_DIR}/../../share/PySide2/typesystems
    --output-directory=${CMAKE_CURRENT_BINARY_DIR}
    )

# Specify which sources will be generated by shiboken, and their dependencies.
set(GENERATED_SOURCES
    ${CMAKE_CURRENT_BINARY_DIR}/__pyside2_xstudio/__pyside2_xstudio_module_wrapper.cpp
	${CMAKE_CURRENT_BINARY_DIR}/__pyside2_xstudio/qmlviewport_wrapper.cpp
	${CMAKE_CURRENT_BINARY_DIR}/__pyside2_xstudio/threadedviewportwindow_wrapper.cpp
	${CMAKE_CURRENT_BINARY_DIR}/__pyside2_xstudio/plainviewport_wrapper.cpp)

set(GENERATED_SOURCES_DEPENDENCIES
    ${WRAPPED_HEADER}
    ${TYPESYSTEM_FILE}
    )

set(SHIBOKEN_PATH shiboken2)

# Add custom target to run shiboken.
add_custom_command(OUTPUT ${GENERATED_SOURCES}
                    COMMAND ${SHIBOKEN_PATH}
                    ${SHIBOKEN_OPTIONS} ${WRAPPED_HEADER} ${TYPESYSTEM_FILE}
                    DEPENDS ${GENERATED_SOURCES_DEPENDENCIES}
                    WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}
                    COMMENT "Running generator for ${TYPESYSTEM_FILE}.")

set(SOURCES
	threaded_viewport.cpp
	plain_viewport.cpp
	qml_viewport.cpp
	caf_system.cpp
	../../../../ui/qml/xstudio/qml.qrc
	${GENERATED_SOURCES}
)

add_library(${PROJECT_NAME} SHARED ${SOURCES})

if(WIN32)
    set(EXE_EXTENSION ".exe")
else()
    set(EXE_EXTENSION ".bin")
endif()

set_target_properties(${PROJECT_NAME}
    PROPERTIES
    RUNTIME_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/bin"
    OUTPUT_NAME "${PROJECT_NAME}${EXE_EXTENSION}"
	LINK_DEPENDS_NO_SHARED true
)

target_link_libraries(${PROJECT_NAME}
	PRIVATE
		xstudio::caf_utility
		xstudio::colour_pipeline
		xstudio::global
		xstudio::ui::viewport
		xstudio::ui::opengl::viewport
		xstudio::ui::qt::viewport_widget
		xstudio::ui::qml::module
		xstudio::ui::qml::global_store
		xstudio::ui::qml::helper
		xstudio::ui::qml::playhead
		xstudio::ui::qml::bookmark
		xstudio::ui::qml::session
		xstudio::ui::qml::studio
		xstudio::ui::qml::viewport
		xstudio::ui::qml::quickfuture
		xstudio::ui::qml::tag
		xstudio::utility
		xstudio::module
	PRIVATE
		caf::core
		$<$<BOOL:${NVIDIA_HACK}>:GLdispatch>
		Qt5::Core
		Qt5::Gui
		Qt5::Widgets
		Qt5::Quick
		Qt5::QuickWidgets
		Qt5::Network
		Qt5::Qml
		OpenSSL::SSL
		ZLIB::ZLIB
		Shiboken2::libshiboken
		PySide2::pyside2
)

default_options(${PROJECT_NAME})

include_directories("${PYSIDE2_INCLUDE_DIR}/QtGui")
include_directories("${PYSIDE2_INCLUDE_DIR}/QtCore")
include_directories("${PYSIDE2_INCLUDE_DIR}/QtWidgets")
include_directories("${PYSIDE2_INCLUDE_DIR}/QtQuick")
include_directories("${PYSIDE2_INCLUDE_DIR}/QtQuickWidgets")
include_directories("${PYSIDE2_INCLUDE_DIR}/QtNetwork")
include_directories("${PYSIDE2_INCLUDE_DIR}/QtQml")
include_directories("${PYSIDE2_INCLUDE_DIR}/PySide2")
include_directories(${SHIBOKEN_PYTHON_INCLUDE_DIRS})

set(PYTHONVP "python${Python_VERSION_MAJOR}.${Python_VERSION_MINOR}")

set_target_properties(${PROJECT_NAME} PROPERTIES OUTPUT_NAME ${PROJECT_NAME})

if(INSTALL_XSTUDIO)
	set_target_properties(
		${PROJECT_NAME}
		PROPERTIES
		#PREFIX "${PYTHON_MODULE_PREFIX}" - can't get this to work, module isn't found when you do import
		PREFIX ""
	    #SUFFIX "${PYTHON_MODULE_EXTENSION}"
		SUFFIX ".so"
	    LIBRARY_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/bin/python/lib/${PYTHONVP}/site-packages/xstudio/gui"
	)
else()
	set_target_properties(
		${PROJECT_NAME}
		PROPERTIES
		#PREFIX "${PYTHON_MODULE_PREFIX}"
		PREFIX ""
	    #SUFFIX "${PYTHON_MODULE_EXTENSION}"
		SUFFIX ".so"
	)

	install(TARGETS ${PROJECT_NAME}
	        LIBRARY DESTINATION lib/python/xstudio/gui)

endif(INSTALL_XSTUDIO)
